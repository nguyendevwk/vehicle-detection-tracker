import cv2
import time
import torch
import yt_dlp
import numpy as np
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
import argparse

# ====== C·∫•u h√¨nh tham s·ªë d√≤ng l·ªánh ======
parser = argparse.ArgumentParser()
parser.add_argument("--threshold", type=float, default=0.4, help="Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu")
parser.add_argument("--cls", nargs="+", type=int, default=[2, 3, 5, 7], help="C√°c l·ªõp ƒë·ªëi t∆∞·ª£ng c·∫ßn theo d√µi")
args = parser.parse_args()

# ======= C·∫•u h√¨nh ngu·ªìn video =======
USE_WEBCAM = False
YOUTUBE_URL = "https://www.youtube.com/live/Jf1R5RcOgQQ?si=BrVD2EZaWuyln83O"

# ======= Load model YOLO =======
model = YOLO("yolo11n.pt")

# ======= H√†m chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ YOLO sang DeepSORT =======
def convert_detections(results, threshold, classes):
    detections = results[0]  # L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ra t·ª´ YOLO
    boxes = detections.boxes.xyxy.cpu().numpy()  # L·∫•y bounding boxes
    scores = detections.boxes.conf.cpu().numpy()  # L·∫•y ƒë·ªô tin c·∫≠y
    labels = detections.boxes.cls.cpu().numpy().astype(int)  # L·∫•y nh√£n

    lbl_mask = np.isin(labels, classes)  # L·ªçc theo nh√£n mong mu·ªën
    mask = (scores > threshold) & lbl_mask  # L·ªçc theo ng∆∞·ª°ng tin c·∫≠y

    final_boxes = []
    for i, box in enumerate(boxes[mask]):
        final_boxes.append(
            (
                [box[0], box[1], box[2] - box[0], box[3] - box[1]],
                scores[mask][i],
                str(labels[mask][i])
            )
        )
    return final_boxes

# ======= H√†m v·∫Ω bounding box l√™n khung h√¨nh =======
def annotate(tracks, frame):
    for track in tracks:
        if not track.is_confirmed():
            continue
        x1, y1, x2, y2 = map(int, track.to_tlbr())  # L·∫•y t·ªça ƒë·ªô
        track_id = track.track_id
        label = f"ID {track_id}"

        # V·∫Ω bounding box v√† ID
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    return frame

# ======= L·∫•y link livestream YouTube (n·∫øu c·∫ßn) =======
stream_url = None
if not USE_WEBCAM:
    ydl_opts = {'quiet': True, 'format': 'best[ext=mp4]'}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(YOUTUBE_URL, download=False)
        stream_url = info.get("url", None)

# ======= Kh·ªüi t·∫°o ngu·ªìn video =======
video_source = 0 if USE_WEBCAM else stream_url
cap = cv2.VideoCapture(video_source)

if not cap.isOpened():
    print("‚ùå Kh√¥ng th·ªÉ m·ªü ngu·ªìn video!")
    exit()

# ======= Kh·ªüi t·∫°o DeepSORT Tracker =======
deepsort_tracker = DeepSort(max_age=5, n_init=3, nms_max_overlap=1.0, max_cosine_distance=0.2, nn_budget=100)

# ======= C·∫•u h√¨nh x·ª≠ l√Ω video =======
frame_count = 0
detect_interval = 75
tracked_objects = []

fps = 0
prev_time = time.time()

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c khung h√¨nh, ki·ªÉm tra ngu·ªìn video.")
        break

    frame_count += 1

    if frame_count % detect_interval == 0:
        # üîπ Ch·∫°y YOLO nh·∫≠n di·ªán
        results = model(frame)
        print (results)

        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ YOLO sang ƒë·ªãnh d·∫°ng cho DeepSORT
        detections = convert_detections(results, args.threshold, args.cls)

        # C·∫≠p nh·∫≠t danh s√°ch ƒë·ªëi t∆∞·ª£ng theo d√µi
        tracked_objects = deepsort_tracker.update_tracks(detections, frame=frame)
    else:
        # üîπ D√πng DeepSORT ƒë·ªÉ theo d√µi
        tracked_objects = deepsort_tracker.update_tracks([], frame=frame)

    # V·∫Ω ƒë·ªëi t∆∞·ª£ng theo d√µi l√™n frame
    frame = annotate(tracked_objects, frame)

    # T√≠nh FPS
    curr_time = time.time()
    fps = 1 / (curr_time - prev_time)
    prev_time = curr_time

    # Hi·ªÉn th·ªã FPS
    cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    # Hi·ªÉn th·ªã video realtime
    cv2.imshow("YOLOv8 + DeepSORT Realtime", frame)

    # Nh·∫•n 'q' ƒë·ªÉ tho√°t
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ======= D·ª´ng ch∆∞∆°ng tr√¨nh =======
cap.release()
cv2.destroyAllWindows()
